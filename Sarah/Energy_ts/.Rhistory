test_y<-data$test$y
data<-dataset_mnist()
library(keras)
data<-dataset_mnist()
system("conda config --set ssl_verify false")  # get past conda sslerror's
use_condaenv('r-tensorflow')
data<-dataset_mnist()
system("conda config --set ssl_verify false")
Sys.getenv()
reticulate::py_discover_config("keras")
library(keras)
install_tensorflow()
install.packages("keras")
install.packages("keras")
library(keras)
install_keras()
install.packages("devtools")
devtools::install_github("rstudio/keras")
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/keras")
install.packages("keras")
library(keras)
install_keras()
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/keras")
install.packages("keras")
library(keras)
install_keras()
data<-dataset_mnist()
use_condaenv("r-tensorflow")
data<-dataset_mnist()
library(tensorflow)
data<-dataset_mnist()
library(reticulate)
py_discover_config("keras")
use_condaenv("r-tensorflow")
library(tensorflow)
Sys.getenv()
data<-dataset_mnist()
library(devtools)
library(keras)
library(reticulate)
py_discover_config("keras")
use_condaenv("r-tensorflow")
library(tensorflow)
Sys.getenv()
reticulate::py_discover_config("keras")
data<-dataset_mnist()
install_keras()
install_tensorflow()
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install.packages("tensorflow")
library(tensorflow)
install.packages(c("processx", "psych", "R.oo", "reticulate", "yaml"))
install.packages("processx")
install.packages("yaml")
library(devtools)
library(keras)
library(reticulate)
library(tensorflow)
data<-dataset_mnist()
install_keras()
install_tensorflow()
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.0.0")
source("https://www.r-statistics.com/wp-content/uploads/2012/01/source_https.r.txt") # Making sure we can source code from github
data(iris)
set.seed(250)
library(datasets)
data(iris)
summary(iris)
pairs(iris)
lattice(iris)
library(lattice)
data(iris)
summary(iris)
lattice(iris)
pairs(iris)
pairs(Species~., data=iris, col=iris$Species)
chart.Correlation(iris,
method="pearson",
histogram=TRUE,
pch=16)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
pairs(Species~., data = iris, col = iris$Species, hist = TRUE)
chart.Correlation(iris,
method="pearson",
histogram=TRUE,
pch=16)
warnings()
chart.Correlation(iris,
method="pearson",
histogram=TRUE,
pch=16)
chart.Correlation(iris[,c("Spepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16)
iris[,c("Spepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16)
pairs(Species~., data = iris, col = iris$Species, hist = TRUE)
pairs(Species~., data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")], col = iris$Species, hist = TRUE)
pairs(Species~., data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")], col = iris$Species)
pairs(iris$Species~., data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")], col = iris$Species)
pairs(
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species)
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16)
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16,
grouping(iris$Species))
pairs(
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel = panel_density)
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel = panel_density)
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel = panel_hist)
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
upper.panel=panel.cor,
diag.panel=panel.hist)
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel=panel.hist)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
usr <- par("usr"); on.exit(par(usr))
library(datasets)
library(lattice)
library(PerformanceAnalytics)
data(iris)
summary(iris)
pairs(iris)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel=panel.hist)
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16,
grouping(iris$Species))
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species,
diag.panel=panel.hist)
pairs(x = iris,
data = iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col = iris$Species)
pairs(x = iris,
data = iris[1:4],
col = iris$Species)
pairs(
data = iris[1:4],
col = iris$Species)
pairs(iris,
data = iris[1:4],
col = iris$Species)
library(PerformanceAnalytics)
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16,
grouping(iris$Species))
library(lattice)
splom(~iris[1:4])
library(ggplot2)
plotmatrix(iris[1:4])
library(GGally)
plotmatrix(iris[1:4])
library(PerformanceAnalytics)
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16,
grouping(iris$Species))
warnings()
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
histogram=TRUE,
pch=16,
grouping(iris$Species))
chart.Correlation(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
method="pearson",
histogram=TRUE,
pch=16,
grouping(iris$Species))
ggcorplot(
data = iris[1:4],
var_text_size = 5,
cor_text_limits = c(5,10))
warnings()
ggcorplot(
data = iris[1:4],
var_text_size = 5,
cor_text_limits = c(5,10))
install.packages("lme4")
install.packages("lme4")
install.packages(c("covr", "processx", "Rcpp", "reticulate", "yaml"))
install.packages("processx")
sensor_data = read.csv('/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/Production_Threshold_2018_06_01_12_04_13.csv')
View(sensor_data)
out = sensor_data$n_max
write.csv(out, "/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/sensor_data.csv")
write.csv(out, "/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/sensor_data.csv", row.names = FALSE)
out = as.data.frame(sensor_data$n_max)
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/sensor_data.csv",
row.names = FALSE,
col.names = FALSE)
View(out)
View(sensor_data)
View(out)
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE,
col.names = FALSE)
sensor_data = read.csv('/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/Production_Threshold_2018_06_01_12_04_13.csv')
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE,
col.names = FALSE)
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE)
sensor_data = read.csv('/Users/sarahewing/Documents/OnBoarding/python/NN_TF_talk/Production_Threshold_2018_06_01_12_04_13.csv')
out = sensor_data$n_max
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE)
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE,
col.names = FALSE)
out = sensor_data$n_max[1:1000]
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE,
col.names = FALSE)
write.csv(out,
"/Users/sarahewing/Documents/OnBoarding/python/sensor_data.csv",
row.names = FALSE)
install.packages("Spark")
install.packages(c("gtools", "reticulate", "survival"))
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(SparkR)
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/home/spark")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
sparkR.session()
shiny::runApp('Documents/OnBoarding/energy_forecasting/Energy_ts')
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
library(shiny)
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
shinyApp(ui, server)
prediction_date_upper = as.POSIXct('2015-01-01 13:00:00', tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S" )
plotty = raw[which(raw$prediction_date > prediction_date_upper
#& raw$prediction_date < maxd
),]
prediction_date_upper
prediction_date_upper = as.POSIXct('2015-10-01 13:00:00', tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S" )
plotty = raw[which(raw$prediction_date > prediction_date_upper
#& raw$prediction_date < maxd
),]
plotty = raw[which(raw$prediction_dttm > prediction_date_upper
#& raw$prediction_date < maxd
),]
ggplot(plotty, aes(x = prediction_dttm, y = price)) +
geom_line(size = 1) +
scale_color_manual(values = c("#00AFBB")) +
theme_minimal() +
stat_smooth(color = "#FC4E07", method = "loess")
prediction_date_upper
raw$prediction_dttm
View(raw)
runApp()
runApp()
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
library(shiny)
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
shinyApp(ui, server)
runApp()
runApp()
ls()
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
shinyApp(ui, server)
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
library(ggplot2)
library(zoo)
shinyApp(ui, server)
runExample("01_hello")
shinyApp(ui = ui, server = server)
source(ui)
source("ui")
source("ui.r")
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
runExample("01_hello")
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
##runExample("01_hello")
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
## the names of the variables
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
## format the date
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
source("ui.r")
source("server.r")
# Create Shiny app ----
shinyApp(ui = ui, server = server)
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
##runExample("01_hello")
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
## the names of the variables
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
## format the date
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
source("ui.r")
source("server.r")
# Create Shiny app ----
shinyApp(ui = ui, server = server)
##########################################
#
#  File Name: server.r
#
#  Author: Sarah Ewing
#
#  Description: This file is the interactive calcs
#         of the Shiny app
#
##########################################
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
#mind <- as.Date("2015-1-1")
#maxd <- as.Date("2015-2-1")
plotty = raw[which(raw$prediction_date > input$prediction_date_upper
#& raw$prediction_date < maxd
),]
ggplot(plotty, aes(x = prediction_dttm, y = price)) +
geom_line(size = 1) +
scale_color_manual(values = c("#00AFBB")) +
theme_minimal() +
stat_smooth(color = "#FC4E07", method = "loess")
})
}
setwd("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts")
ls()
list.files(getwd())
library(shiny)
library(ggplot2)
library(zoo)
raw = read.csv("/Users/sarahewing/Documents/OnBoarding/energy_forecasting/Energy_ts/data/sarah_data.csv", header = F)
## the names of the variables
colnames(raw) = c("prediction_date", "wind_speed_100m",
"wind_direction_100m",
"temperature",
"air_density",
"pressure", "precipitation", "wind_gust", "radiation",
"wind_speed", "wind_direction", "price")
## format the date
raw$prediction_dttm = as.POSIXct(raw$prediction_date, tz = "UTC",
origin = "1970-01-01", format = "%Y-%m-%d %H:%M:%S")
raw$prediction_date = as.Date(substr(raw$prediction_date,1,11))
raw = raw[order(raw$prediction_date),]
source("ui.r")
source("server.r")
# Start Shiny app ----
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
